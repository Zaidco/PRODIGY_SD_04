import java.util.*;

public class SudokuSolver {   // Sudoku Solver

    // Print the Sudoku grid
    public static void printGrid(int[][] grid) {
        for (int r = 0; r < 9; r++) {
            for (int d = 0; d < 9; d++) {
                System.out.print(grid[r][d] + " ");
            }
            System.out.println();
        }
    }

    // Find an empty location in the Sudoku grid
    public static boolean findEmptyLocation(int[][] grid, int[] emptyLocation) {
        for (int row = 0; row < 9; row++) {
            for (int col = 0; col < 9; col++) {
                if (grid[row][col] == 0) {
                    emptyLocation[0] = row;
                    emptyLocation[1] = col;
                    return true;
                }
            }
        }
        return false;
    }

    // Check if it's safe to place a number in a given position
    public static boolean isSafe(int[][] grid, int row, int col, int num) {
        // Check row
        for (int d = 0; d < 9; d++) {
            if (grid[row][d] == num) {
                return false;
            }
        }

        // Check column
        for (int r = 0; r < 9; r++) {
            if (grid[r][col] == num) {
                return false;
            }
        }

        // Check 3x3 sub-grid
        int startRow = row - row % 3, startCol = col - col % 3;
        for (int r = 0; r < 3; r++) {
            for (int d = 0; d < 3; d++) {
                if (grid[r + startRow][d + startCol] == num) {
                    return false;
                }
            }
        }

        return true;
    }

    // Solve the Sudoku puzzle using backtracking
    public static boolean solveSudoku(int[][] grid) {
        int[] emptyLocation = new int[2];
        if (!findEmptyLocation(grid, emptyLocation)) {
            return true; // Puzzle solved
        }
        int row = emptyLocation[0], col = emptyLocation[1];

        for (int num = 1; num <= 9; num++) {
            if (isSafe(grid, row, col, num)) {
                grid[row][col] = num;
                if (solveSudoku(grid)) {
                    return true;
                }
                grid[row][col] = 0; // Reset if placing num didn't lead to a solution
            }
        }

        return false;
    }

    // Main method to take user input and solve the puzzle
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int[][] sudokuGrid = new int[9][9];

        System.out.println("Enter the Sudoku puzzle row by row (use 0 for empty cells):");

        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                sudokuGrid[i][j] = scanner.nextInt();
            }
        }

        System.out.println("Unsolved Sudoku puzzle:");
        printGrid(sudokuGrid);

        if (solveSudoku(sudokuGrid)) {
            System.out.println("\nSolved Sudoku puzzle:");
            printGrid(sudokuGrid);
        } else {
            System.out.println("No solution exists");
        }

        scanner.close();
    }
}
